packages: 
  yum:
    python-requests: [] 
    python-boto: []

files:
  "/root/update-docker.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      # **********************************
      # **     Update Docker Script     **
      # **      Date : 24/09/2014       **
      # **     Autor: Andr√©s Amado      **
      # **********************************
      UPDATE_CHECK=/root/docker.update
      if [ -f $UPDATE_CHECK ]; then
          echo "Docker is in the latest version, does not need update!"
      else
          /etc/init.d/docker stop
          sleep 5
          wget https://get.docker.io/builds/Linux/x86_64/docker-latest -O $(type -P docker)
          /etc/init.d/docker start
          sleep 5
          touch $UPDATE_CHECK
          echo "Docker was successfully updated!"
      fi

  "/root/mount-ebs.py":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env python
      """Attach and mount EBS volume to local EC2 instance"""

      __author__ = "Andres Amado <andres@uppoints.com>"
      __version__ = "1.0"

      import argparse
      import os
      import signal
      import sys
      import time

      import boto.ec2
      import boto.exception
      import requests

      try:
          import simplejson as json
      except ImportError:
          import json

      _DATA_FILE='/opt/elasticbeanstalk/deploy/configuration/containerconfiguration'
      _DISCOVER_URL="http://169.254.169.254/latest/meta-data/instance-id"

      # on close, detach ebs
      parser = argparse.ArgumentParser(description='Attach and mount EBS volume to local instance')

      parser.add_argument('--volumeid', metavar='<VOLUME_ID>', default=os.environ.get('VOLUME_ID'),
                          help='Volume ID of EBS volume to attach')

      parser.add_argument('--device', metavar='<DEVICE>', default=os.environ.get('DEVICE'),
                          help='Device to expose volume on')

      parser.add_argument('--mountpoint', metavar='<MOUNT_POINT>', default=os.environ.get('MOUNT_POINT'),
                          help='Point to mount volume on')

      parser.add_argument('--region', metavar='<REGION>', default=os.environ.get('REGION'),
                          help='AWS region')

      args = parser.parse_args()

      data = []
      with open(_DATA_FILE) as f:
          data = json.loads(f.read())

      docker_data = data['docker']

      env_vars = {}
      if 'env' in docker_data:
          for keyvalue in docker_data['env']:
              (key, s, value) = keyvalue.partition('=')
              env_vars[key] = value

      if not args.volumeid:
          args.volumeid = env_vars['VOLUME_ID']
      if not args.device:
          args.device = env_vars['DEVICE']
      if not args.mountpoint:
          args.mountpoint = env_vars['MOUNT_POINT']
      if not args.region:
          args.region = env_vars['REGION']

      print 'VOLUME_ID = %s ' % args.volumeid
      print 'DEVICE = %s ' % args.device
      print 'MOUNT_POINT = %s ' % args.mountpoint
      print 'REGION = %s ' % args.region
      sys.stdout.flush()

      # AWS metadata service that provides credentials is unreliable
      # so retry several times
      attempts = 0
      while True:
          try:
              conn = boto.ec2.connect_to_region(args.region)

          except boto.exception.NoAuthHandlerFound:
              print "Couldn't find auth credentials handler, trying again"
              sys.stdout.flush()

              attempts += 1
              if attempts > 5:
                  print "Tried 5 times, giving up"
                  sys.exit(3)
              else:
                  time.sleep(1)
          else:
              break

      instance = requests.get(_DISCOVER_URL).content

      existing_vols = conn.get_all_volumes([args.volumeid])
      if len(existing_vols) > 0:
          vol = existing_vols[0]

          if vol.attach_data.instance_id == instance:
              print "Volume {0} already attached to {1}".format(args.volumeid, instance)
              sys.stdout.flush()

          else:
              conn.attach_volume(args.volumeid, instance, args.device) or sys.exit(1)
              if not os.path.exists(args.mountpoint):
                  os.makedirs(args.mountpoint)
              time.sleep(10)
              os.system("mount {0} {1}".format(args.device, args.mountpoint))
              print "Attached volume {0} to device {1} on instance {2} mount point {3}".format(args.volumeid, args.device, instance, args.mountpoint)
              sys.stdout.flush()

      else:
          print "Cannot find volume {0}".format(args.volumeid)

commands:
  01-run-ebs-mounter:
    command: /root/mount-ebs.py
  02-run-update-docker:
    command: /root/update-docker.sh
  03-set-docker-privileged:  
    command: sed -i 's/docker run -d/docker run --privileged -d/g' /opt/elasticbeanstalk/hooks/appdeploy/pre/04run.sh 
